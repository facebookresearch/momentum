"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[7170],{61832:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=s(74848),r=s(28453);const t={},l="PyPI Publishing Guide",o={id:"developer_guide/pypi_publishing",title:"PyPI Publishing Guide",description:"This guide explains how to maintain and update PyPI publishing configuration for pymomentum-cpu and pymomentum-gpu packages.",source:"@site/docs_python/03_developer_guide/03_pypi_publishing.md",sourceDirName:"03_developer_guide",slug:"/developer_guide/pypi_publishing",permalink:"/momentum/pymomentum/developer_guide/pypi_publishing",draft:!1,unlisted:!1,editUrl:"https://github.com/facebookresearch/momentum/edit/main/momentum/website/docs_python/03_developer_guide/03_pypi_publishing.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Design Decisions",permalink:"/momentum/pymomentum/developer_guide/design_decisions"},next:{title:"Conda Package Management",permalink:"/momentum/pymomentum/developer_guide/conda_publishing"}},d={},c=[{value:"System Overview",id:"system-overview",level:2},{value:"Updating PyTorch Versions",id:"updating-pytorch-versions",level:2},{value:"Adding New Python Versions",id:"adding-new-python-versions",level:2},{value:"Platform Support",id:"platform-support",level:2},{value:"Supported Platforms",id:"supported-platforms",level:3},{value:"Windows Support Status",id:"windows-support-status",level:3},{value:"Platform-Specific Constraints",id:"platform-specific-constraints",level:3},{value:"Testing Changes Locally",id:"testing-changes-locally",level:2},{value:"CI Workflow",id:"ci-workflow",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pypi-publishing-guide",children:"PyPI Publishing Guide"})}),"\n",(0,i.jsxs)(n.p,{children:["This guide explains how to maintain and update PyPI publishing configuration for ",(0,i.jsx)(n.code,{children:"pymomentum-cpu"})," and ",(0,i.jsx)(n.code,{children:"pymomentum-gpu"})," packages."]}),"\n",(0,i.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The PyPI publishing system uses a ",(0,i.jsx)(n.strong,{children:"template-based approach"})," to generate platform and Python version-specific configurations:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Template"}),": ",(0,i.jsx)(n.code,{children:"pyproject-pypi.toml.j2"})," - Jinja2 template with PyTorch version placeholders"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Generator"}),": ",(0,i.jsx)(n.code,{children:"scripts/generate_pyproject.py"})," - Renders template with version constraints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Generated files"}),": ",(0,i.jsx)(n.code,{children:"pyproject-pypi-cpu.toml"})," and ",(0,i.jsx)(n.code,{children:"pyproject-pypi-gpu.toml"})," (temporary, gitignored)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CI workflow"}),": ",(0,i.jsx)(n.code,{children:".github/workflows/publish_to_pypi.yml"})," - Builds and publishes wheels"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"updating-pytorch-versions",children:"Updating PyTorch Versions"}),"\n",(0,i.jsxs)(n.p,{children:["When new PyTorch versions are released, update the defaults in ",(0,i.jsx)(n.code,{children:"scripts/generate_pyproject.py"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Linux PyTorch versions\nparser.add_argument("--torch-min-py312", default="2.8.0")  # Update here\nparser.add_argument("--torch-max-py312", default="2.9")    # Update here\n\n# macOS PyTorch versions (usually older due to platform limitations)\nparser.add_argument("--torch-min-py312-macos", default="2.2.0")  # Update here\nparser.add_argument("--torch-max-py312-macos", default="2.3")    # Update here\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": ",(0,i.jsx)(n.code,{children:"--torch-max"})," is ",(0,i.jsx)(n.strong,{children:"exclusive"})," (e.g., ",(0,i.jsx)(n.code,{children:"2.9"})," means ",(0,i.jsx)(n.code,{children:"<2.9"}),", so PyTorch 2.9.x is NOT allowed)."]}),"\n",(0,i.jsx)(n.h2,{id:"adding-new-python-versions",children:"Adding New Python Versions"}),"\n",(0,i.jsx)(n.p,{children:"To support Python 3.14+:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Update ",(0,i.jsx)(n.code,{children:"scripts/generate_pyproject.py"})]})," - Add new CLI arguments:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'parser.add_argument("--torch-min-py314", default="X.X.X")\nparser.add_argument("--torch-max-py314", default="X.X")\nparser.add_argument("--torch-min-py314-macos", default="X.X.X")\nparser.add_argument("--torch-max-py314-macos", default="X.X")\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Update ",(0,i.jsx)(n.code,{children:"pyproject-pypi.toml.j2"})]})," - Add version-specific constraints:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jinja",children:"\"torch>={{ torch_min_py314 }},<{{ torch_max_py314 }}; ... and python_version == '3.14'\",\n\"torch>={{ torch_min_py314_macos }},<{{ torch_max_py314_macos }}; ... and python_version == '3.14'\",\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Update ",(0,i.jsx)(n.code,{children:"pixi.toml"})]})," - Add new feature and environment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[feature.py314]\ndependencies = { python = "3.14.*" }\n\n[environments]\npy314 = ["py314"]\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Update CI workflow"})," - Add to matrix:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"matrix:\n  python-version: ['3.12', '3.13', '3.14']\n  include:\n    - python-version: '3.14'\n      pixi-environment: py314\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-support",children:"Platform Support"}),"\n",(0,i.jsx)(n.h3,{id:"supported-platforms",children:"Supported Platforms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Linux"})," (x86_64): Full support for CPU and GPU packages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"macOS"})," (Intel and ARM): CPU package only"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Windows"}),": Currently NOT supported"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"windows-support-status",children:"Windows Support Status"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Windows wheels are currently unavailable"})," due to technical limitations:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"RPATH limitation"}),": Unlike Linux/macOS, Windows doesn't support RPATH for dynamic library loading. PyTorch DLLs must either be:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Bundled in the wheel (exceeds PyPI's 100MB limit)"}),"\n",(0,i.jsx)(n.li,{children:"Located via system PATH or explicit code"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Package size"}),": Including PyTorch DLLs results in wheels >100MB, exceeding PyPI's size limit for projects without special approval."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We are tracking Windows support via a ",(0,i.jsx)(n.a,{href:"#",children:"pending request to increase the package size limit"}),". Users requiring Windows support can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Build from source using ",(0,i.jsx)(n.code,{children:"pixi run -e py312 build_py"})]}),"\n",(0,i.jsx)(n.li,{children:"Wait for PyPI size limit approval"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"platform-specific-constraints",children:"Platform-Specific Constraints"}),"\n",(0,i.jsx)(n.p,{children:"PyTorch constraints are platform-aware using pip environment markers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Linux uses latest PyTorch\n\"torch>=2.8.0,<2.9; platform_system == 'Linux'\"\n\n# macOS uses older versions\n\"torch>=2.2.0,<2.3; platform_system == 'Darwin'\"\n"})}),"\n",(0,i.jsx)(n.p,{children:"The same wheel works on all platforms - pip selects the correct constraint at install time."}),"\n",(0,i.jsx)(n.h2,{id:"testing-changes-locally",children:"Testing Changes Locally"}),"\n",(0,i.jsx)(n.p,{children:"Generate and inspect configs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pixi run generate_pyproject\ncat pyproject-pypi-cpu.toml    # Check CPU constraints\ncat pyproject-pypi-gpu.toml    # Check GPU constraints\n"})}),"\n",(0,i.jsx)(n.p,{children:"Build test wheels:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pixi run -e py312 clean_dist\npixi run -e py312 build_pypi_wheel\npixi run -e py312 check_pypi\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ci-workflow",children:"CI Workflow"}),"\n",(0,i.jsx)(n.p,{children:"The CI automatically:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Generates config files with default versions"}),"\n",(0,i.jsx)(n.li,{children:"Builds wheels for all Python versions and platforms"}),"\n",(0,i.jsxs)(n.li,{children:["Publishes to PyPI when:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pushing git tags matching ",(0,i.jsx)(n.code,{children:"v*"})," (e.g., ",(0,i.jsx)(n.code,{children:"v0.2.0"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Manual workflow dispatch with ",(0,i.jsx)(n.code,{children:"publish=true"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Windows Unicode errors"}),": Avoid Unicode characters (\u2713, \u2717) in print statements - they fail on Windows CI with ",(0,i.jsx)(n.code,{children:"cp1252"})," encoding."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CUDA not found in CI"}),": GPU builds require the shared CUDA setup action (",(0,i.jsx)(n.code,{children:".github/actions/setup-cuda"}),"). All GPU workflows use this to mock CUDA on CI runners."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Generated files tracked by git"}),": Ensure ",(0,i.jsx)(n.code,{children:"pyproject-pypi*.toml"})," is in ",(0,i.jsx)(n.code,{children:".gitignore"})," - these files are temporary and generated during builds."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);