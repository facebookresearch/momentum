[workspace]
name = "momentum"
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]
version = "0.1.0"
description = "A library providing foundational algorithms for human kinematic motion and numerical optimization solvers to apply human motion in various applications"
license = "MIT"
readme = "README.md"
homepage = "https://facebookresearch.github.io/momentum/"
repository = "https://github.com/facebookresearch/momentum"

[dependencies]
# build and test dependencies
boost = ">=1.84.0,<2"
c-compiler = ">=1.11.0,<2"
clang-format = "==18.1.3"
cmake = ">=3.28.0,<4"
cxx-compiler = ">=1.11.0,<2"
gtest = ">=1.17.0,<2"
ninja = ">=1.13.1,<2"
rerun-sdk = ">=0.23.3,<0.24"
pip = ">=25.2,<26"
pybind11 = ">=2.13.6,<4"
pytest = ">=8.4.2,<9"
ruff = ">=0.14.0,<0.15"
scikit-build-core = ">=0.10.0,<0.11"
scipy = ">=1.10.0,<2"
setuptools = ">=80.9.0,<81"
setuptools-scm = ">=8.0.0,<9"
sphinx = ">=7.0.0,<9"
sphinx-rtd-theme = ">=3.0.2,<4"
taplo = ">=0.9.3,<0.10"
tracy-profiler-gui = ">=0.11.1,<0.13"
twine = ">=6.1.0,<7"
yamllint = ">=1.37.0,<2"

# runtime dependencies
blas = ">=2.135,<3"
ceres-solver = ">=2.2.0,<3"
cli11 = ">=2.5.0,<3"
dispenso = ">=1.4.0,<2"
eigen = ">=3.4.0,<4"
ezc3d = ">=1.5.19,<2"
drjit-cpp = ">=1.2.0,<2"
fmt = ">=11.2.0,<12"
fx-gltf = ">=2.0.0,<3"
indicators = ">=2.3,<3"
kokkos = ">=4.6.2,<5"
librerun-sdk = ">=0.23.3,<0.24"
ms-gsl = ">=4.2.0,<5"
nlohmann_json = ">=3.12.0,<4"
openfbx = ">=0.9,<0.10"
openssl = ">=3.5.4,<4"
re2 = ">=2025.8.12,<2026"
spdlog = ">=1.15.3,<2"
tracy-profiler-client = ">=0.12.2,<0.13"
urdfdom = ">=4.0.1,<5"
zlib = ">=1.3.1,<2"

[tasks]
clean = { cmd = """
    rm -rf build \
    && rm -rf .pixi \
    && rm pixi.lock
    """, description = "Clean all build artifacts and pixi cache" }

# Linting tasks
lint_cpp = { cmd = """
    clang-format -i \
        axel/**/*.h axel/**/*.cpp \
        momentum/**/*.h momentum/**/*.cpp \
        pymomentum/**/*.h pymomentum/**/*.cpp
    """, description = "Format C++ code using clang-format" }

lint_toml = { cmd = """
    taplo format *.toml
    """, description = "Format TOML files using taplo" }

lint_yaml = { cmd = """
    yamllint -d relaxed .github/workflows/*.yml || true
    """, description = "Lint YAML files using yamllint" }

lint_python = { cmd = """
    if [ -d scripts ]; then ruff check --fix scripts/**/*.py || true; fi
    """, description = "Lint Python files using ruff (if scripts/ exists)" }

lint = { depends-on = [
  "lint_cpp",
  "lint_toml",
  "lint_yaml",
  "lint_python",
], description = "Run all linters (C++, TOML, YAML, Python)" }

lint-check = { cmd = """
    clang-format --dry-run --Werror \
        axel/**/*.h axel/**/*.cpp \
        momentum/**/*.h momentum/**/*.cpp \
        pymomentum/**/*.h pymomentum/**/*.cpp
    """, description = "Check if code is properly formatted without modifying files" }
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/release \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DBUILD_SHARED_LIBS=ON \
        -DMOMENTUM_ENABLE_FBX_SAVING=$MOMENTUM_ENABLE_FBX_SAVING \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { MOMENTUM_ENABLE_FBX_SAVING = "OFF", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" }, description = "Configure CMake for Release build" }
config_dev = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/debug \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DBUILD_SHARED_LIBS=ON \
        -DMOMENTUM_ENABLE_FBX_SAVING=$MOMENTUM_ENABLE_FBX_SAVING \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { MOMENTUM_ENABLE_FBX_SAVING = "OFF", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" }, description = "Configure CMake for Debug build" }
build = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/release -j --target all", depends-on = [
  "config",
], description = "Build Release version" }
build_dev = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/debug -j --target all", depends-on = [
  "config_dev",
], description = "Build Debug version" }
build_fast = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/release -j4 --target all", depends-on = [
  "config",
], description = "Build Release version with limited parallelism" }
test = { cmd = "ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/release --output-on-failure", depends-on = [
  "build",
], description = "Run C++ tests (Release)" }
test_dev = { cmd = "ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/debug --output-on-failure", depends-on = [
  "build_dev",
], description = "Run C++ tests (Debug)" }
test_verbose = { cmd = "ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/release --output-on-failure --verbose", depends-on = [
  "build",
], description = "Run C++ tests with verbose output" }
hello_world = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/hello_world", depends-on = [
  "build",
], description = "Run hello world example" }
convert_model = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/convert_model", depends-on = [
  "build",
], description = "Run model conversion tool" }
c3d_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/c3d_viewer", depends-on = [
  "build",
], description = "Run C3D file viewer" }
fbx_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/fbx_viewer", depends-on = [
  "build",
], description = "Run FBX file viewer" }
glb_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/glb_viewer", depends-on = [
  "build",
], description = "Run GLB file viewer" }
urdf_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/urdf_viewer", depends-on = [
  "build",
], description = "Run URDF file viewer" }
process_markers = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/process_markers_app", depends-on = [
  "build",
], description = "Run marker processing application" }
refine_motion = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/refine_motion", depends-on = [
  "build",
], description = "Run motion refinement tool" }
install = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/release -j --target install", depends-on = [
  "build",
], description = "Install built libraries and executables" }
tracy = { cmd = "tracy-profiler", description = "Launch Tracy profiler GUI" }
test_py = { cmd = "pytest pymomentum/test/*.py", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
  "build_py",
], description = "Run Python tests" }
test_py_verbose = { cmd = "pytest pymomentum/test/*.py -v", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
  "build_py",
], description = "Run Python tests with verbose output" }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
  "build_py",
], description = "Build Python API documentation" }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
  "doc_py",
], description = "Open Python documentation in browser" }

# ==================
# PyPI Publishing
# ==================
# Usage:
#   GPU: pixi run -e gpu build_pypi       # Build pymomentum-gpu wheel + sdist
#   CPU: pixi run -e cpu build_pypi       # Build pymomentum-cpu wheel + sdist
#   Publish: pixi run publish_pypi --gpu  # or --cpu or --all

# Clean distribution artifacts
clean_dist = { cmd = """
    rm -rf dist; \
    find build -maxdepth 1 -type f \\( -name '*.whl' -o -name '*.tar.gz' \\) -delete 2>/dev/null || true
    """, description = "Remove distribution artifacts from previous builds" }

# Unified wheel building (wheels only - no sdist)
# Usage: pixi run -e py312 build_pypi_wheel cpu   OR   pixi run -e py312-cuda129 build_pypi_wheel gpu
[tasks.build_pypi_wheel]
args = ["variant"]
cmd = """
    python -c "import os, shutil; os.makedirs('.tmp', exist_ok=True); shutil.copy('pyproject.toml', '.tmp/pyproject-backup.toml'); shutil.copy('pyproject-pypi-{{ variant }}.toml', 'pyproject.toml')" && \
    pip wheel . --no-build-isolation --wheel-dir=dist && \
    python -c "import shutil; shutil.move('.tmp/pyproject-backup.toml', 'pyproject.toml')"
"""
description = "Build PyPI wheel (arg: cpu or gpu)"

# Unified repair for Linux (adds manylinux tags)
# Usage: pixi run build_pypi_repair cpu   OR   pixi run build_pypi_repair gpu
[tasks.build_pypi_repair]
args = ["variant"]
cmd = """
    {% if variant == "gpu" %}
        auditwheel repair \
            --exclude 'libtorch*.so' --exclude 'libc10*.so' \
            --exclude 'libcu*.so*' --exclude 'libnv*.so*' --exclude 'libmkl*.so' \
            dist/pymomentum_{{ variant }}-*-linux_x86_64.whl -w dist/ && \
        rm dist/pymomentum_{{ variant }}-*-linux_x86_64.whl || \
        echo "Skip auditwheel (non-Linux)"
    {% else %}
        auditwheel repair \
            --exclude 'libtorch*.so' --exclude 'libc10*.so' --exclude 'libmkl*.so' \
            dist/pymomentum_{{ variant }}-*-linux_x86_64.whl -w dist/ && \
        rm dist/pymomentum_{{ variant }}-*-linux_x86_64.whl || \
        echo "Skip auditwheel (non-Linux)"
    {% endif %}
"""
description = "Add manylinux tags to wheel (arg: cpu or gpu)"

# Check and publish tasks (wheels only, no sdist)
[tasks.check_pypi]
cmd = """
    twine check dist/pymomentum_*.whl
"""
description = "Check wheel files with twine"

[tasks.publish_pypi]
args = [{ arg = "variant", default = "" }]
cmd = """
    {% if variant == "" %}
        twine upload dist/pymomentum_*.whl
    {% else %}
        twine upload dist/pymomentum_{{ variant }}-*.whl
    {% endif %}
"""
depends-on = ["check_pypi"]
description = "Publish wheels to PyPI (optional arg: cpu or gpu, default: all)"

[tasks.publish_pypi_test]
cmd = """
    twine upload --repository testpypi --skip-existing dist/pymomentum_*.whl
"""
depends-on = ["check_pypi"]
description = "Publish to TestPyPI for testing"

#===========
# linux-64
#===========

[target.linux-64.dependencies]
nvtx-c = ">=3.1.0"             # TODO: Add to pytorch as run dep
sysroot_linux-64 = ">=2.28,<3"
patchelf = ">=0.17.2,<0.18"
auditwheel = ">=6.4.2,<7"

[target.linux-64.tasks]
# TODO: Check sha256 of fbx202037_fbxsdk_linux
install_fbxsdk = { cmd = """
    mkdir -p .deps \
        && curl -fsSL https://damassets.autodesk.net/content/dam/autodesk/www/files/fbx202037_fbxsdk_gcc_linux.tar.gz -o .deps/fbx_sdk.tar.gz \
        && mkdir -p .deps/fbxsdk_download \
        && tar -xzf .deps/fbx_sdk.tar.gz -C .deps/fbxsdk_download \
        && rm .deps/fbx_sdk.tar.gz \
        && chmod ugo+x .deps/fbxsdk_download/fbx202037_fbxsdk_linux \
        && mkdir -p .deps/fbxsdk/2020.3.7 \
        && yes yes | .deps/fbxsdk_download/fbx202037_fbxsdk_linux .deps/fbxsdk/2020.3.7 \
        && rm -rf .deps/fbxsdk_download/fbx202037_fbxsdk_linux
""", outputs = [
  ".deps/fbxsdk/2020.3.7",
] }
install_deps = { depends-on = ["install_fbxsdk"] }
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/release \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DBUILD_SHARED_LIBS=ON \
        -DMOMENTUM_ENABLE_FBX_SAVING=ON \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { FBXSDK_PATH = ".deps/fbxsdk", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" }, depends-on = [
  "install_deps",
] }
config_dev = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/debug \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DBUILD_SHARED_LIBS=ON \
        -DMOMENTUM_ENABLE_FBX_SAVING=ON \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { FBXSDK_PATH = ".deps/fbxsdk", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" }, depends-on = [
  "install_deps",
] }
build_py = { cmd = "pip install . -v --no-build-isolation", env = { FBXSDK_PATH = ".deps/fbxsdk", CMAKE_ARGS = """
    -DMOMENTUM_ENABLE_FBX_SAVING=ON \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
    -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
    -DMOMENTUM_USE_SYSTEM_PYBIND11=OFF \
    -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
    -DBUILD_SHARED_LIBS=OFF
""", MOMENTUM_ENABLE_SIMD = "ON", TORCH_CUDA_ARCH_LIST = "5.0;6.0;6.1;7.0;7.5;8.0;8.6;8.9;9.0+PTX" }, depends-on = [
  "install_deps",
] }
test_py = { cmd = "pytest pymomentum/test/*.py", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
  "build_py",
] }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
  "build_py",
] }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
  "doc_py",
] }

#============
# osx-64
#============

[target.osx.dependencies]

[target.osx.tasks]
build_py = { cmd = "pip install . -v", env = { CMAKE_ARGS = """
    -DMOMENTUM_ENABLE_FBX_SAVING=$MOMENTUM_ENABLE_FBX_SAVING \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
    -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
    -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
    -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
    -DBUILD_SHARED_LIBS=OFF
""", MOMENTUM_ENABLE_FBX_SAVING = "OFF", MOMENTUM_ENABLE_SIMD = "ON" } }
# TODO: Remove -k option, once saving tests are disabled programmatically when Autodesk FBX SDK is unavailable (FBX loading always works via OpenFBX)
test_py = { cmd = "pytest pymomentum/test/*.py -k 'not (TestFBXIO and (test_save_motions_with_joint_params or test_save_motions_with_model_params))'", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
  "build_py",
  "install",
] }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
  "build_py",
] }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
  "doc_py",
] }

#============
# osx-arm64
#============

[target.osx-arm64.dependencies]

[target.osx-arm64.tasks]
build_py = { cmd = "pip install . -v", env = { CMAKE_ARGS = """
    -DMOMENTUM_ENABLE_FBX_SAVING=$MOMENTUM_ENABLE_FBX_SAVING \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
    -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
    -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
    -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
    -DBUILD_SHARED_LIBS=OFF
""", MOMENTUM_ENABLE_FBX_SAVING = "OFF", MOMENTUM_ENABLE_SIMD = "ON" } }
# TODO: Remove -k option, once saving tests are disabled programmatically when Autodesk FBX SDK is unavailable (FBX loading always works via OpenFBX)
test_py = { cmd = "pytest pymomentum/test/*.py -k 'not (TestFBXIO and (test_save_motions_with_joint_params or test_save_motions_with_model_params))'", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
  "build_py",
  "install",
] }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
  "build_py",
] }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
  "doc_py",
] }

#=========
# win-64
#=========

[target.win-64.dependencies]

[target.win-64.tasks]
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp \
        -G 'Visual Studio 17 2022' \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DBUILD_SHARED_LIBS=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_ENABLE_FBX_SAVING=$MOMENTUM_ENABLE_FBX_SAVING \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=%MOMENTUM_ENABLE_SIMD% \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { MOMENTUM_ENABLE_FBX_SAVING = "OFF", MOMENTUM_BUILD_PYMOMENTUM = "OFF", MOMENTUM_ENABLE_SIMD = "ON" } }
open_vs = { cmd = "cmd /c start build\\$PIXI_ENVIRONMENT_NAME\\cpp\\momentum.sln", depends-on = [
  "config",
] }
build = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp --config Release --parallel", depends-on = [
  "config",
] }
build_dev = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp --config Debug --parallel", depends-on = [
  "config",
] }
test = { cmd = "cmd /c \"set PATH=build\\$PIXI_ENVIRONMENT_NAME\\cpp\\Release;%PATH% & ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp --output-on-failure --build-config Release\"", depends-on = [
  "build",
] }
test_dev = { cmd = "cmd /c \"set PATH=build\\$PIXI_ENVIRONMENT_NAME\\cpp\\Debug;%PATH% & ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp --output-on-failure --build-config Debug\"", depends-on = [
  "build_dev",
] }
hello_world = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/hello_world.exe", depends-on = [
  "build",
] }
convert_model = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/convert_model.exe", depends-on = [
  "build",
] }
c3d_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/c3d_viewer.exe", depends-on = [
  "build",
] }
fbx_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/fbx_viewer.exe", depends-on = [
  "build",
] }
glb_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/glb_viewer.exe", depends-on = [
  "build",
] }
urdf_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/urdf_viewer.exe", depends-on = [
  "build",
] }
process_markers = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/process_markers_app.exe", depends-on = [
  "build",
] }
refine_motion = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/refine_motion.exe", depends-on = [
  "build",
] }
install = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp --target install --config Release --parallel", depends-on = [
  "build",
] }
tracy = { cmd = "tracy-profiler.exe" }
build_py = { cmd = "pip install . -v", env = { CMAKE_ARGS = """
    -DMOMENTUM_ENABLE_FBX_SAVING=$MOMENTUM_ENABLE_FBX_SAVING \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
    -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
    -DMOMENTUM_USE_SYSTEM_PYBIND11=OFF \
    -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
    -DBUILD_SHARED_LIBS=OFF
""", MOMENTUM_ENABLE_FBX_SAVING = "OFF", MOMENTUM_ENABLE_SIMD = "ON", TORCH_CUDA_ARCH_LIST = "5.0;6.0;6.1;7.0;7.5;8.0;8.6;8.9;9.0+PTX" } }
# TODO: Remove -k option, once saving tests are disabled programmatically when Autodesk FBX SDK is unavailable (FBX loading always works via OpenFBX)
# TODO: Remove test_lighting skip once stack overflow issue on Windows is resolved (currently causes crash with CMake build)
test_py = { cmd = "pytest pymomentum/test/*.py -k 'not ((TestFBXIO and (test_save_motions_with_joint_params or test_save_motions_with_model_params)) or test_lighting)'", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
  "build_py",
  "install",
] }

#==============
# Feature: CPU
#==============

[feature.cpu]
dependencies = { pytorch = { version = ">=2.8.0,<3", build = "*cpu*" } }
channels = ["conda-forge"]

#==============
# Feature: GPU
#==============

[feature.py312]
dependencies = { python = "3.12.*" }

[feature.py313]
dependencies = { python = "3.13.*" }

[feature.py312-cuda129]
platforms = ["linux-64", "win-64"]
system-requirements = { cuda = "12" }
dependencies = { cuda-toolkit = ">=12.9.0,<13", nvtx-c = ">=3.1.1", cuda-version = "12.9.*", python = "3.12.*", pytorch-gpu = ">=2.8.0,<3" }

[feature.py313-cuda129]
platforms = ["linux-64", "win-64"]
system-requirements = { cuda = "12" }
dependencies = { cuda-toolkit = ">=12.9.0,<13", nvtx-c = ">=3.1.1", cuda-version = "12.9.*", python = "3.13.*", pytorch-gpu = ">=2.8.0,<3" }

#==============
# Environments
#==============

[environments]
# Multi-Python environments for PyPI wheel building
py312 = ["py312", "cpu"]
py313 = ["py313", "cpu"]

# GPU environments
py312-cuda129 = ["py312-cuda129"]
py313-cuda129 = ["py313-cuda129"]
gpu = ["py312-cuda129"]

# Default environments
cpu = ["cpu"]
default = ["cpu"]
